init
    npx create-react-app <name>

npx use webpack for bundling and the Babel compiler
    
deploy using
    npm run build

next.js as styling ramework

example of JS toolchain 
    package manager : yarn or npm
    bundler : webpack  or Parcel
    compiler : Babel ...

make sure everything is set up for production 
    eg (bundling, minifying, React Dev browser plugin that check some env var...)

start server at
    http://localhost:3000
    npm start 


=== React
    Component to tell what to render (and update/refresh rendering)

// I had to force the use of bezier-js 
v4.0.3 instead of the most up to date as it caused an export error
https://github.com/vasturiano/react-force-graph/issues/282
 
npm install 
  react react-dom react-force-graph-2d 
  google-protobuf bezier-js@4.0.3

=== Sage-Engine

Get the rl-xp branch (main branch doesn't work) and install dep via poetry :
    git clone -b rl-xp https://github.com/sage-org/sage-engine
    cd sage-engine
    poetry install --extras "hdt postgres hbase"

Enter poetry env:
    poetry shell

Get the persondata.hdt file and test_config.yaml and move them to tests/data/

Run server:
    sage tests/data/test_config.yaml -w 4 -p 8000

==== FIX "AttributeError : can't set attribute" 
https://github.com/RDFLib/rdflib/issues/1204

my version (in poetry shell):
> pip list | grep pyparsing
pyparsing    3.0.6

attempt fix (in poetry shell):
> pip install pyparsing==2.4.7



--- TODO

Co server
button click 'next'
récupérer les infos 
bindings : resultat / triple de la req
hasNext : bool 
next : string protobuf encoded   
stats : cardinality/
    metrics : cost, coverage, progression

et si on decode Next :


réussir à afficher dans un noeux 
- le 'o?' courant 
- et "numero de tuple courant" / "cardinalité"

